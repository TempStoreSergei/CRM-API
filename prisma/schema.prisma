generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "calendar", "profile", "messenger"]
}

// User authentication and authorization
model Role {
  id       String     @id @default(uuid())
  name     String     @map("name")
  RoleUser RoleUser[]

  @@map("roles")
  @@schema("auth")
}

model Provider {
  id   String @id @default(uuid())
  name String @map("name")
  User User[]

  @@map("providers")
  @@schema("auth")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique @map("email")
  password   String?    @map("password")
  provider   Provider?  @relation(fields: [providerId], references: [id])
  providerId String?    @map("provider_id")
  rolesId    String     @map("roles_id")
  isBlocked  Boolean    @default(false) @map("is_blocked")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  Token      Token[]
  Event      Event[]
  RoleUser   RoleUser[]
  Profile    Profile?
  Chat       Chat[]

  @@map("users")
  @@schema("auth")
}

model Token {
  token     String   @unique @map("token")
  exp       DateTime @map("exp")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
  @@schema("auth")
}

model RoleUser {
  id        String   @id @default(uuid())
  name      String   @map("name")
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("role_users")
  @@schema("auth")
}

// Task management
model Category {
  id    String  @id @default(uuid())
  name  String  @map("name")
  Event Event[]

  @@map("categories")
  @@schema("calendar")
}

model Priority {
  id    String  @id @default(uuid())
  name  String  @map("name")
  Event Event[]

  @@map("priorities")
  @@schema("calendar")
}

model Event {
  id          String   @id @default(uuid())
  name        String   @map("name")
  description String   @map("description")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String   @map("category_id")
  priority    Priority @relation(fields: [priorityId], references: [id], onDelete: Cascade)
  priorityId  String   @map("priority_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("events")
  @@schema("calendar")
}

// profile
model Profile {
  id            String           @id @default(uuid())
  userId        String           @unique
  projectId     String?          @map("project_id")
  displayName   String?          @map("display_name")
  avatar        String?          @map("avatar")
  statusMessage String?          @map("status_message")
  phoneNumber   String?          @map("phone_number")
  lastSeen      DateTime?        @map("last_seen")
  isOnline      Boolean          @default(false) @map("is_online")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  Projects      ProfileProject[]
  User          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project       Project?         @relation(fields: [projectId], references: [id])

  @@map("profiles")
  @@schema("profile")
}

model ProfileProject {
  profileId String  @map("profile_id")
  projectId String  @map("project_id")
  Profile   Profile @relation(fields: [profileId], references: [id])
  Project   Project @relation(fields: [projectId], references: [id])

  @@id([profileId, projectId])
  @@map("profile_projects")
  @@schema("profile")
}

model Project {
  id             String           @id @default(uuid())
  name           String           @map("name")
  description    String?          @map("description")
  taskId         String?          @map("task_id")
  Profiles       Profile[]
  Task           Task?            @relation(fields: [taskId], references: [id])
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  ProfileProject ProfileProject[]

  @@map("projects")
  @@schema("profile")
}

model Task {
  id          String    @id @default(uuid())
  name        String    @map("name")
  description String?   @map("description")
  completed   Boolean   @default(false) @map("completed")
  Projects    Project[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("tasks")
  @@schema("profile")
}

model Chat {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  text      String?
  mediaUrl  String?   @map("media_url")
  type      String    @default("text")
  replyTo   String?   @map("reply_at")
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([createdAt, userId]) // Adjust based on query patterns
  @@map("chats")
  @@schema("messenger")
}
